server:
  port: 8888

spring:
  application:
    name: spring-cloud-gateway
  cloud:
    nacos:
      # Nacos 作为注册中心的配置项，对应 NacosDiscoveryProperties 配置类
      discovery:
        server-addr: 127.0.0.1:8848 # Nacos 服务器地址
    gateway: # Spring Cloud Gateway 配置项，对应 GatewayProperties 类
      # 路由配置项，对应 RouteDefinition 数组
      routes:
        - id: gateway_demo   # 路由的编号
          uri: lb://feign-demo-provider  # 路由到的目标地址 ## 可实现负载均衡
          predicates: # 断言，作为路由的匹配条件，对应 RouteDefinition 数组
            - Path=/gateway/**
            - Query=name,yubajin
            - Method=GET
            - Auth=Authorization
          filters:  # 过滤器，对请求进行拦截，实现自定义的功能，对应 FilterDefinition 数组
            # http://localhost:8888/gateway/test -> http://localhost:14273/test
            - StripPrefix=1
          - id: gateway_router
#            lb:// 前缀，表示将请求负载均衡转发到对应的服务的实例。
#            "'lb://' + serviceId" Spring EL 表达式，将从注册中心获得到的服务列表，每一个服务的名字对应 serviceId，最终使用 Spring EL 表达式进行格式化。
            uri: lb://spring-cloud-user-provider
            predicates:
              - Path=/gateway/**
            filters:
              - StripPrefix=1
          - id: add_request_parameter_route
              uri: http://localhost:8088/
              filters:   # 往过滤器中添加头信息
                - AddRequestParameter=name,Mic  # {key, value}
          - id: request_reatelimiter_route   # ############ redis 限流
            uri: http://localhost:8088/
            predicates:
              - Path=/ratelimiter/**
            filters:
              - StripPrefix=1
              - name: RequestRateLimiter   # 对应RequestRateLimiterGatewayFilterFactory
                args:
                  keyResolver: '#{@ipAddressKeyResolver}'
                  redis-rate-limiter.replenishRate: 1  # 每秒生成的令牌
                  redis-rate-limiter.burstCapacity: 2  # 令牌容量
          - id: retry_route
            uri: http://localhost:8088/
            predicates:
              - Path=/retry/**
            filters:
              - StripPrefix=1
              - name: Retry  # 对应RetryGatewayFilterFactory
                args:
                  retries: 3  # 重试次数
                  status: 503  # 当服务端返回的状态码是503的时候，才会重试
          - id: define_route   # ###########自定义过滤器
            uri: http://localhost:8088/
            predicates:
              - Path=/define/**
            filters:
              - StripPrefix=1
              - Define=Mic
        discovery:  ##### 需要在网关中开启服务发现的功能
          locator:
            lower-case-service-id: true  # 是否大小写敏感
            enabled: true
  redis:
    host: 127.0.0.1


#eureka:
#  client:
#    service-url:
#      defaultZone: http://localhost:8762/eureka

# gateway 端点配置开启
management:
  endpoints:
    web:
      exposure:
        include: "*"
